generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model User {
  id            String    @id @default(uuid())
  name          String?   // Added for NextAuth
  email         String?   @unique // Added for NextAuth
  emailVerified DateTime? // Added for NextAuth
  image         String?   // Added for NextAuth
  twitterHandle String?   @unique
  eloRating     Int       @default(1500)
  totalWins     Int       @default(0)
  totalLosses   Int       @default(0)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  wonderStats   PlayerWonderStats[]
  gamesAsPlayer1 Game[]   @relation("Player1Games")
  gamesAsPlayer2 Game[]   @relation("Player2Games")
  @@index([eloRating, totalWins, totalLosses])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  username          String? // Twitter handle
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Game models
model Wonder {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  stats       PlayerWonderStats[]
  gamesAsWonder1 Game[] @relation("Wonder1Games")
  gamesAsWonder2 Game[] @relation("Wonder2Games")
}

model PlayerWonderStats {
  userId    String
  wonderId  Int
  wins      Int      @default(0)
  losses    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  wonder    Wonder   @relation(fields: [wonderId], references: [id])
  @@id([userId, wonderId])
  @@index([wonderId, wins, losses])
}

model Game {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  player1Id     String
  player2Id     String
  status        GameStatus @default(WAITING)
  winner        String?    // ID of the winning User
  player1WonderId Int
  player2WonderId Int
  player1Progress Int     @default(0) // Progress toward Wonder (0-21)
  player2Progress Int     @default(0)
  currentTurn   String    // ID of user whose turn it is
  actionsInProgress Json  // Store ongoing actions (Attack, Defend, etc.)
  turns         Int       @default(0)
  player1       User      @relation("Player1Games", fields: [player1Id], references: [id])
  player2       User      @relation("Player2Games", fields: [player2Id], references: [id])
  player1Wonder Wonder    @relation("Wonder1Games", fields: [player1WonderId], references: [id])
  player2Wonder Wonder    @relation("Wonder2Games", fields: [player2WonderId], references: [id])
  @@index([createdAt, status])
}

enum GameStatus {
  WAITING
  CHOOSING
  IN_PROGRESS
  COMPLETED
  ABANDONED
} 